#ifndef AuxPort_AudioEffect_H
#define AuxPort_AudioEffect_H
#pragma once
/*
*			AuxPort Wrapper over Rackfx
			"I tried to make it easier" - inpinseptipin

			BSD 3-Clause License

			Copyright (c) 2022, Satyarth Arora, Teaching Assistant, University of Miami
			All rights reserved.

			Redistribution and use in source and bin-ary forms, with or without
			modification, are permitted provided that the following conditions are met:

			1. Redistributions of source code must retain the above copyright notice, this
			   list of conditions and the following disclaimer.

			2. Redistributions in binary form must reproduce the above copyright notice,
			   this list of conditions and the following disclaimer in the documentation
			   and/or other materials provided with the distribution.

			3. Neither the name of the copyright holder nor the names of its
			   contributors may be used to endorse or promote products derived from
			   this software without specific prior written permission.

			THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
			AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
			IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
			FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
			DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
			SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
			CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
			OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
			OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
#include <vector>
#include <math.h>
#include "plugincore.h"
#include "fxobjects.h"
namespace AuxPort
{
/*===================================================================================*/
/*
	[Class] Abstraction over AudioFilter class in FXObjects [Don't Mess with it]
*/
	template<class bufferType, class effectType>
	class Filter
	{
	public:
		Filter() = default;
		Filter(const Filter& filter) = default;
		void setFilterType(const filterAlgorithm& type)
		{
			filterParameters.algorithm = type;
		}
		void setParameters(const effectType& centerFrequency, const effectType& QFactor, const effectType& boostCut)
		{
			filterParameters.Q = QFactor;
			filterParameters.fc = centerFrequency;
			filterParameters.boostCut_dB = boostCut < 0 ? boostCut : raw2dB(boostCut);
			filter.setParameters(filterParameters);
		}
		bufferType process(const bufferType& frame)
		{
			return filter.processAudioSample(frame);
		}
		~Filter() = default;
	private:
		AudioFilter filter;
		AudioFilterParameters filterParameters;

	};

/*===================================================================================*/
/*
	[Struct] Simple Struct for handling two channel Frames [DON'T MESS WITH IT]
*/
	template<class bufferType>
	struct Frame
	{
		bufferType left;
		bufferType right;
	};

	template<class bufferType, class effectType>
	class Effect
	{
	public:
/*===================================================================================*/
/*
	[Constructor] Safely Allocates the memory
*/
		Effect<bufferType, effectType>()
		{

			// --- mono impulse array 
			double lowPassIR[1024] = { -0.00540437456220388412475585937500, -0.00146999710705131292343139648438, -0.00993166398257017135620117187500, -0.00354031496681272983551025390625, 0.00026281661121174693107604980469, -0.00718861306086182594299316406250, -0.00782468542456626892089843750000, -0.00256886519491672515869140625000, -0.00568633805960416793823242187500, -0.00228760251775383949279785156250, -0.00615993048995733261108398437500, -0.00217642611823976039886474609375, -0.00771769415587186813354492187500, -0.00493262335658073425292968750000, -0.00515368534252047538757324218750, -0.00135751802008599042892456054688, -0.00737284310162067413330078125000, -0.00196591578423976898193359375000, -0.00863275770097970962524414062500, -0.00317138829268515110015869140625, -0.00991533882915973663330078125000, -0.00181773363146930932998657226563, -0.00748334918171167373657226562500, -0.00174681819044053554534912109375, -0.00701066479086875915527343750000, 0.00150955002754926681518554687500, -0.00790272932499647140502929687500, 0.00005743594010709784924983978271, -0.01008449401706457138061523437500, -0.00115085067227482795715332031250, -0.01158962678164243698120117187500, -0.00054684939095750451087951660156, -0.00817976798862218856811523437500, 0.00130223203450441360473632812500, -0.00978875998407602310180664062500, 0.00225310190580785274505615234375, -0.01069511007517576217651367187500, 0.00166891119442880153656005859375, -0.01150631438940763473510742187500, 0.00251167593523859977722167968750, -0.01200006343424320220947265625000, 0.00053015281446278095245361328125, -0.01172040030360221862792968750000, 0.00230855378322303295135498046875, -0.01458531990647315979003906250000, 0.00174057227559387683868408203125, -0.01561201643198728561401367187500, 0.00174054421950131654739379882813, -0.01634421758353710174560546875000, 0.00332462484948337078094482421875, -0.01428303029388189315795898437500, 0.00018183386418968439102172851563, -0.01821189559996128082275390625000, 0.00265309936366975307464599609375, -0.01980876736342906951904296875000, 0.00341798737645149230957031250000, -0.01949336566030979156494140625000, 0.00413171248510479927062988281250, -0.02383242174983024597167968750000, -0.00236952491104602813720703125000, -0.01566906273365020751953125000000, 0.00004217181412968784570693969727, -0.03323378041386604309082031250000, 0.01097819767892360687255859375000, -0.02217102609574794769287109375000, -0.00238923844881355762481689453125, -0.02553244680166244506835937500000, -0.00121240143198519945144653320313, -0.02589414454996585845947265625000, 0.01157830655574798583984375000000, -0.03005633689463138580322265625000, 0.00496831350028514862060546875000, -0.02862721681594848632812500000000, 0.00431212969124317169189453125000, -0.02994050458073616027832031250000, 0.00658207852393388748168945312500, -0.03000159934163093566894531250000, 0.00789544824510812759399414062500, -0.03424184396862983703613281250000, 0.01225097663700580596923828125000, -0.03267467767000198364257812500000, 0.01159911043941974639892578125000, -0.03315448388457298278808593750000, 0.01227590441703796386718750000000, -0.03549854084849357604980468750000, 0.01384648773819208145141601562500, -0.03595993667840957641601562500000, 0.01870314031839370727539062500000, -0.03897205740213394165039062500000, 0.02108504809439182281494140625000, -0.03758109360933303833007812500000, 0.02288988605141639709472656250000, -0.03801907598972320556640625000000, 0.02624948136508464813232421875000, -0.03947233408689498901367187500000, 0.02984615601599216461181640625000, -0.04161588475108146667480468750000, 0.03759421780705451965332031250000, -0.04316016659140586853027343750000, 0.03993032872676849365234375000000, -0.04369639605283737182617187500000, 0.04321191832423210144042968750000, -0.04554054513573646545410156250000, 0.04989691823720932006835937500000, -0.04755289480090141296386718750000, 0.05807696282863616943359375000000, -0.05519086867570877075195312500000, 0.06705339998006820678710937500000, -0.05785086750984191894531250000000, 0.07320884615182876586914062500000, -0.05896772816777229309082031250000, 0.08427868038415908813476562500000, -0.06310144066810607910156250000000, 0.10163549333810806274414062500000, -0.07176949828863143920898437500000, 0.12975805997848510742187500000000, -0.08841943740844726562500000000000, 0.15623572468757629394531250000000, -0.09419424086809158325195312500000, 0.18620212376117706298828125000000, -0.10354171693325042724609375000000, 0.23566068708896636962890625000000, -0.16053245961666107177734375000000, 0.33846101164817810058593750000000, -0.37242674827575683593750000000000, 0.65557360649108886718750000000000, -1.04973840713500976562500000000000, 1.27174854278564453125000000000000, 1.27174854278564453125000000000000, -1.04973840713500976562500000000000, 0.65557360649108886718750000000000, -0.37242674827575683593750000000000, 0.33846101164817810058593750000000, -0.16053245961666107177734375000000, 0.23566068708896636962890625000000, -0.10354171693325042724609375000000, 0.18620212376117706298828125000000, -0.09419424086809158325195312500000, 0.15623572468757629394531250000000, -0.08841943740844726562500000000000, 0.12975805997848510742187500000000, -0.07176949828863143920898437500000, 0.10163549333810806274414062500000, -0.06310144066810607910156250000000, 0.08427868038415908813476562500000, -0.05896772816777229309082031250000, 0.07320884615182876586914062500000, -0.05785086750984191894531250000000, 0.06705339998006820678710937500000, -0.05519086867570877075195312500000, 0.05807696282863616943359375000000, -0.04755289480090141296386718750000, 0.04989691823720932006835937500000, -0.04554054513573646545410156250000, 0.04321191832423210144042968750000, -0.04369639605283737182617187500000, 0.03993032872676849365234375000000, -0.04316016659140586853027343750000, 0.03759421780705451965332031250000, -0.04161588475108146667480468750000, 0.02984615601599216461181640625000, -0.03947233408689498901367187500000, 0.02624948136508464813232421875000, -0.03801907598972320556640625000000, 0.02288988605141639709472656250000, -0.03758109360933303833007812500000, 0.02108504809439182281494140625000, -0.03897205740213394165039062500000, 0.01870314031839370727539062500000, -0.03595993667840957641601562500000, 0.01384648773819208145141601562500, -0.03549854084849357604980468750000, 0.01227590441703796386718750000000, -0.03315448388457298278808593750000, 0.01159911043941974639892578125000, -0.03267467767000198364257812500000, 0.01225097663700580596923828125000, -0.03424184396862983703613281250000, 0.00789544824510812759399414062500, -0.03000159934163093566894531250000, 0.00658207852393388748168945312500, -0.02994050458073616027832031250000, 0.00431212969124317169189453125000, -0.02862721681594848632812500000000, 0.00496831350028514862060546875000, -0.03005633689463138580322265625000, 0.01157830655574798583984375000000, -0.02589414454996585845947265625000, -0.00121240143198519945144653320313, -0.02553244680166244506835937500000, -0.00238923844881355762481689453125, -0.02217102609574794769287109375000, 0.01097819767892360687255859375000, -0.03323378041386604309082031250000, 0.00004217181412968784570693969727, -0.01566906273365020751953125000000, -0.00236952491104602813720703125000, -0.02383242174983024597167968750000, 0.00413171248510479927062988281250, -0.01949336566030979156494140625000, 0.00341798737645149230957031250000, -0.01980876736342906951904296875000, 0.00265309936366975307464599609375, -0.01821189559996128082275390625000, 0.00018183386418968439102172851563, -0.01428303029388189315795898437500, 0.00332462484948337078094482421875, -0.01634421758353710174560546875000, 0.00174054421950131654739379882813, -0.01561201643198728561401367187500, 0.00174057227559387683868408203125, -0.01458531990647315979003906250000, 0.00230855378322303295135498046875, -0.01172040030360221862792968750000, 0.00053015281446278095245361328125, -0.01200006343424320220947265625000, 0.00251167593523859977722167968750, -0.01150631438940763473510742187500, 0.00166891119442880153656005859375, -0.01069511007517576217651367187500, 0.00225310190580785274505615234375, -0.00978875998407602310180664062500, 0.00130223203450441360473632812500, -0.00817976798862218856811523437500, -0.00054684939095750451087951660156, -0.01158962678164243698120117187500, -0.00115085067227482795715332031250, -0.01008449401706457138061523437500, 0.00005743594010709784924983978271, -0.00790272932499647140502929687500, 0.00150955002754926681518554687500, -0.00701066479086875915527343750000, -0.00174681819044053554534912109375, -0.00748334918171167373657226562500, -0.00181773363146930932998657226563, -0.00991533882915973663330078125000, -0.00317138829268515110015869140625, -0.00863275770097970962524414062500, -0.00196591578423976898193359375000, -0.00737284310162067413330078125000, -0.00135751802008599042892456054688, -0.00515368534252047538757324218750, -0.00493262335658073425292968750000, -0.00771769415587186813354492187500, -0.00217642611823976039886474609375, -0.00615993048995733261108398437500, -0.00228760251775383949279785156250, -0.00568633805960416793823242187500, -0.00256886519491672515869140625000, -0.00782468542456626892089843750000, -0.00718861306086182594299316406250, 0.00026281661121174693107604980469, -0.00354031496681272983551025390625, -0.00993166398257017135620117187500, -0.00146999710705131292343139648438, -0.00540437456220388412475585937500, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000 };

			IRArray = new double[256];
			for (int i = 0; i < 256; i++)
				IRArray[i] = lowPassIR[i];

			impulseConvolver.init(256);
			impulseConvolver.setImpulseResponse(IRArray, 256);
		}
/*===================================================================================*/
/*
	[Destructor] Safely Deallocates the memory
*/
		~Effect<bufferType, effectType>()
		{
			if (IRArray != nullptr)
				delete[] IRArray;
		}
/*===================================================================================*/
/*
	[Copy Constructor] Safely Copies memory from one Effect Object to another
*/
		Effect<bufferType, effectType>(const Effect<bufferType, effectType>& kernel) = default;
/*===================================================================================*/
/*
	[Function] Set your Control Addresses (DONT MESS WITH IT)
*/
		void push(void* parameterAddress, const boundVariableType& dataType,int controlNumber)
		{
			_controls.push_back({parameterAddress,dataType,controlNumber});
		}
/*===================================================================================*/
/*
	[Function] Use this to update your FX objects before the processing block
*/
		void prepareToPlay(const bufferType& sampleRate)
		{
			/*
				Update Internal Parameters of your FX Objects here
			*/
			LFF.setFilterType(filterAlgorithm::kHPF2);
			LFF.setParameters(getControl(controlID::m_fLFFFc), 0.707, 0);

			LPEQ.setFilterType(filterAlgorithm::kCQParaEQ);
			LPEQ.setParameters(getControl(controlID::m_fLPEQFc), getControl(controlID::m_fLPEQQ), dBToRatio(getControl(controlID::m_fLPEQGain)));
			sumLPEQ.setFilterType(filterAlgorithm::kCQParaEQ);
			sumLPEQ.setParameters(getControl(controlID::m_fLPEQFc), getControl(controlID::m_fLPEQQ), dBToRatio(getControl(controlID::m_fLPEQGain)));

			APF.setFilterType(filterAlgorithm::kAPF1);
			APF.setParameters(getControl(controlID::m_fAPFFc), 0.707, 0);
			sumAPF.setFilterType(filterAlgorithm::kAPF1);
			sumAPF.setParameters(getControl(controlID::m_fAPFFc), 0.707, 0);

			HSF.setFilterType(filterAlgorithm::kHiShelf);
			HSF.setParameters(getControl(controlID::m_fHSFFc), 0.707, getControl(controlID::m_fHSFGain));
			sumHSF.setFilterType(filterAlgorithm::kHiShelf);
			sumHSF.setParameters(getControl(controlID::m_fHSFFc), 0.707, getControl(controlID::m_fHSFGain));
		}
/*===================================================================================*/
/*
	[Function] Implement your Frame DSP Logic here
*/
		void run(Frame<bufferType>& frame)
		{	
			/*===================================================================================*/
			/*
				Making a copy of the input Frame (Dont Mess with it)
			*/
			/*===================================================================================*/

			bufferType leftChannel = frame.left;
			bufferType rightChannel = frame.right;
			/*===================================================================================*/
			/*===================================================================================*/
			/*
				Write DSP Algorithm here
			*/
			/*===================================================================================*/
			/*
				Start
			*/
			bool eqListenMode = getControl(controlID::m_uEQListen) == 1;

			bufferType sumSignal = 0.5 * (leftChannel + rightChannel);			//mid channel
			bufferType differenceSignal = 0.5 * (leftChannel - rightChannel);	//side channel

			//high-pass the difference signal (LFF)
			differenceSignal = LFF.process(differenceSignal);

			//Apply mid/side gain
			float sumGain = getControl(controlID::m_fSumLevel);
			float differenceGain = getControl(controlID::m_fDiffLevel);

			sumSignal *= dBToRatio(sumGain);
			differenceSignal *= dBToRatio(differenceGain);

			// Difference branch 1 - Low Parametric EQ
			bufferType differenceWithLPEQ = LPEQ.process(differenceSignal);

			//// Difference branch 2 - All Pass Filter
			float APFGainRatio = dBToRatio(getControl(controlID::m_fAPFGain));
			bufferType differenceWithAPF = getControl(controlID::m_uAPFEnable) == 1 ? APFGainRatio * APF.process(differenceSignal) : differenceSignal;

			//// Difference branch 3 - High shelf
			bufferType differenceWithHSF = HSF.process(differenceSignal); 
			
			// sum the different branches to get parallel-filtered difference signal
			differenceSignal = (differenceWithHSF + differenceWithAPF + differenceWithLPEQ) / 3.0;


			// EQ-LISTEN MODE: process the sum signal through filters
			bufferType sumWithLPEQ = sumLPEQ.process(sumSignal);
			bufferType sumWithAPF = getControl(controlID::m_uAPFEnable) == 1 ? APFGainRatio * sumAPF.process(sumSignal) : sumSignal;
			bufferType sumWithHSF = sumHSF.process(sumSignal);
			
			bufferType eqListenSignal = (sumWithLPEQ + sumWithAPF + sumWithHSF) / 3.0;

			bufferType leftOut = eqListenMode ? eqListenSignal : (0.5 * (leftChannel + sumSignal + differenceSignal)); //mixed with 50% dry signal

			bufferType rightOut = eqListenMode ? eqListenSignal : (0.5 * (rightChannel + sumSignal - differenceSignal));


			//add the filter
			leftOut = ImpulseConvolver.processAudioSample(leftOut);
			rightOut = leftOut;

			// Apply output gain
			float outputGain = dBToRatio(getControl(controlID::m_fOutputLvl));

			leftOut *= outputGain;
			rightOut *= outputGain;

			

			/*
				End
			*/
			/*===================================================================================*/
			/*===================================================================================*/
			/*
				Save your processed Samples back to the Frame (Dont Mess with it)
			*/																									
			/*===================================================================================*/				
			frame.left = leftOut;																				
			frame.right = rightOut;																				
		}																										
	private:																									
		AuxPort::Filter<float, float> LFF;																		
		AuxPort::Filter<float, float> LPEQ;																		
		AuxPort::Filter<float, float> APF;																		
		AuxPort::Filter<float, float> HSF;																		
																												
		AuxPort::Filter<float, float> sumLPEQ;																	
		AuxPort::Filter<float, float> sumAPF;
		AuxPort::Filter<float, float> sumHSF;
		double* IRArray;
		ImpulseConvolver impulseConvolver;

/*===================================================================================*/
/*
	[Function] Gets the Control from our nice dandy vector of pointers (DONT MESS WITH IT)
*/
		effectType getControl(const int& i)
		{
			Parameters* para;
			for (size_t j = 0; j < _controls.size(); j++)
			{
				para = &_controls[j];
				if (para->controlNumber == i)
				{
					if (para->_dataType == boundVariableType::kFloat)
						return *static_cast<float*>(para->_parameterAddress);
					if (para->_dataType == boundVariableType::kDouble)
						return *static_cast<double*>(para->_parameterAddress);
					if (para->_dataType == boundVariableType::kInt)
						return *static_cast<int*>(para->_parameterAddress);
					if (para->_dataType == boundVariableType::kUInt)
						return *static_cast<uint32_t*>(para->_parameterAddress);
				}
			}
		}
/*===================================================================================*/
/*
	[Function] Use this function to Update your meters
*/
		void setControlValue(const double& newValue,const int& i)
		{
			Parameters* para;
			for (size_t j = 0; j < _controls.size(); j++)
			{
				para = &_controls[j];
				if (para->controlNumber == i)
				{
					if (para->_dataType == boundVariableType::kFloat)
						*static_cast<float*>(para->_parameterAddress) = static_cast<float>(newValue);
					else if (para->_dataType == boundVariableType::kDouble)
						*static_cast<double*>(para->_parameterAddress) = newValue;
					else if (para->_dataType == boundVariableType::kInt)
						*static_cast<int*>(para->_parameterAddress) = static_cast<int>(newValue);
					else if (para->_dataType == boundVariableType::kUInt)
						*static_cast<uint32_t*>(para->_parameterAddress) = static_cast<uint32_t>(newValue);
					break;
				}

			}		
		}

		struct Parameters
		{
			void* _parameterAddress;
			boundVariableType _dataType;
			int controlNumber;
		};
		std::vector<Parameters> _controls;
		
	/*
	[FUNCTION] - convert dB to ratio
	*/

		float dBToRatio(float val) {
			return powf(10.0, 0.05 * val);
		}
	};




	

}
#endif
